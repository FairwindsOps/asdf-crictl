#!/usr/bin/env bash

# asdf plugin for crictl

plugin_name="crictl"
plugin_owner="kubernetes-sigs"
plugin_repo="cri-tools"
expected_hash="your_expected_hash"  # Replace with the expected SHA-512 hash of the binary

platform=$(uname -s | tr '[:upper:]' '[:lower:]')
cpu_arch=$(uname -m)

get_download_url() {
  local release_url="https://github.com/$plugin_owner/$plugin_repo/releases/latest"
  local download_url=$(curl -Ls -o /dev/null -w %{url_effective} "$release_url")

  local asset_url="${download_url/latest/download}"
  local release_page=$(curl -Ls "$release_url")

  local download_path
  download_path=$(echo "$release_page" | grep -o "/$plugin_owner/$plugin_repo/releases/download/.*/crictl-$platform-$cpu_arch")

  if [[ -n $download_path ]]; then
    echo "$asset_url$download_path"
  else
    echo "Error: No suitable binary found for the current platform ($platform/$cpu_arch)."
    exit 1
  fi
}

asdf_crictl_download() {
  local download_url=$(get_download_url)
  local sha512_file="$plugin_name.sha512"
  local binary_path="$plugin_name"

  echo "Downloading $download_url"
  curl -Ls -o $binary_path $download_url

  echo "Downloading SHA512 file"
  curl -Ls -o $sha512_file "$download_url.SHA512"

  echo "Verifying hash"
  local binary_hash=$(sha512sum -c $sha512_file | awk '{print $2}')

  if [[ $binary_hash != "$binary_path: OK" ]]; then
    echo "Binary hash verification failed! Expected: $binary_path: OK, Actual: $binary_hash"
    exit 1
  fi

  rm $sha512_file
}

asdf_crictl_install() {
  cp $plugin_name ~/.asdf/installs/crictl/
}

asdf_crictl_download
asdf_crictl_install
